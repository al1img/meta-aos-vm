From 1066750fc9d974b54c2c19f10a0c4396c64a6fd4 Mon Sep 17 00:00:00 2001
From: Leonid Komarianskyi <leonid_komarianskyi@epam.com>
Date: Mon, 13 Dec 2021 15:24:59 +0200
Subject: [PATCH 2/8] [aos] Add policies for aos components

Signed-off-by: Leonid Komarianskyi <leonid_komarianskyi@epam.com>
---
 policy/modules/system/aos.fc |   9 ++
 policy/modules/system/aos.if |  58 +++++++++
 policy/modules/system/aos.te | 230 +++++++++++++++++++++++++++++++++++
 3 files changed, 297 insertions(+)
 create mode 100644 policy/modules/system/aos.fc
 create mode 100644 policy/modules/system/aos.if
 create mode 100644 policy/modules/system/aos.te

diff --git a/policy/modules/system/aos.fc b/policy/modules/system/aos.fc
new file mode 100644
index 000000000..4aa13babe
--- /dev/null
+++ b/policy/modules/system/aos.fc
@@ -0,0 +1,9 @@
+/usr/bin/aos_servicemanager             --  gen_context(system_u:object_r:aos_exec_t,s0)
+/usr/bin/aos_iamanager                  --  gen_context(system_u:object_r:aos_exec_t,s0)
+/usr/bin/aos_communicationmanager       --  gen_context(system_u:object_r:aos_exec_t,s0)
+/usr/bin/aos_updatemanager              --  gen_context(system_u:object_r:aos_exec_t,s0)
+/usr/bin/aos_vis                        --  gen_context(system_u:object_r:aos_exec_t,s0)
+
+/var/aos(/.*)?                              gen_context(system_u:object_r:aos_var_run_t,s0)
+
+/etc/aos(/.*)?                              gen_context(system_u:object_r:aos_conf_t,s0)
diff --git a/policy/modules/system/aos.if b/policy/modules/system/aos.if
new file mode 100644
index 000000000..870f62f3d
--- /dev/null
+++ b/policy/modules/system/aos.if
@@ -0,0 +1,58 @@
+## <summary>policy for aos components</summary>
+
+########################################
+## <summary>
+##	Execute aos_exec_t in the aos domain.
+## </summary>
+## <param name="domain">
+## <summary>
+##	Domain allowed to transition.
+## </summary>
+## </param>
+#
+interface(`aos_domtrans',`
+	gen_require(`
+		type aos_t, aos_exec_t;
+	')
+
+	corecmd_search_bin($1)
+	domtrans_pattern($1, aos_exec_t, aos_t)
+')
+
+######################################
+## <summary>
+##	Execute aos in the caller domain.
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain allowed access.
+##	</summary>
+## </param>
+#
+interface(`aos_exec',`
+	gen_require(`
+		type aos_exec_t;
+	')
+
+	corecmd_search_bin($1)
+	can_exec($1, aos_exec_t)
+')
+
+########################################
+## <summary>
+##	Read aos var PID files.
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain allowed access.
+##	</summary>
+## </param>
+#
+interface(`aos_read_pid_files',`
+	gen_require(`
+		type aos_var_run_t;
+	')
+
+	files_search_pids($1)
+	read_files_pattern($1, aos_var_run_t, aos_var_run_t)
+')
diff --git a/policy/modules/system/aos.te b/policy/modules/system/aos.te
new file mode 100644
index 000000000..d101f7a9f
--- /dev/null
+++ b/policy/modules/system/aos.te
@@ -0,0 +1,230 @@
+policy_module(aos, 1.0.0)
+
+########################################
+#
+# Declarations
+#
+
+type aos_t;
+type aos_exec_t;
+init_daemon_domain(aos_t, aos_exec_t)
+
+role aos_r;
+
+########################################
+#
+# aos local policy
+#
+allow aos_t self:fifo_file rw_fifo_file_perms;
+allow aos_t self:unix_stream_socket create_stream_socket_perms;
+allow aos_t self:process { getsched signal setsched };
+allow aos_t self:unix_dgram_socket { bind create getattr setopt write };
+allow aos_t self:netlink_route_socket { bind create getattr nlmsg_read write read };
+allow aos_t self:tcp_socket { bind listen accept create getattr setopt connect getopt read write ioctl };
+allow aos_t self:udp_socket { bind listen accept create getattr setopt connect getopt read write ioctl };
+allow aos_t self:capability { dac_read_search net_admin net_raw chown fowner fsetid dac_override sys_module mknod ipc_lock };
+allow aos_t self:rawip_socket { create getopt setopt };
+allow aos_t self:netlink_netfilter_socket { bind create };
+allow aos_t self:netlink_route_socket { nlmsg_write setopt };
+allow aos_t self:packet_socket { create write };
+allow aos_t self:key { search write read };
+allow aos_t self:sem { create destroy unix_write associate read unix_read write };
+
+allow aos_t aos_var_run_t:dir { manage_dir_perms mounton };
+allow aos_t aos_var_run_t:file { manage_file_perms map };
+allow aos_t aos_var_run_t:service { start stop enable disable status reload };
+allow aos_t aos_var_run_t:chr_file manage_chr_file_perms;
+allow aos_t aos_conf_t:dir manage_dir_perms;
+allow aos_t aos_conf_t:file manage_file_perms;
+
+allow aos_t usr_t:file { getattr read };
+allow aos_t usr_t:file open;
+
+allow aos_t efivarfs_t:dir { getattr open read search add_name write };
+allow aos_t efivarfs_t:file { open read create write };
+allow aos_t efivarfs_t:filesystem getattr;
+
+allow aos_t etc_t:file map;
+
+allow aos_t var_t:file { getattr open read create write unlink setattr };
+allow aos_t var_t:dir { add_name write read remove_name create };
+allow aos_t var_lib_t:dir { getattr open read search add_name create write };
+allow aos_t var_lib_t:file { create getattr lock open read write };
+allow aos_t var_run_t:file { lock open read create mounton write getattr rename unlink append };
+allow aos_t var_run_t:dir { add_name write create remove_name rmdir };
+
+allow aos_t init_t:dir search;
+allow aos_t init_t:file read;
+allow aos_t init_t:lnk_file read;
+allow aos_t init_t:unix_stream_socket connectto;
+allow aos_t init_t:key search;
+
+allow aos_t init_t:file { getattr open };
+allow aos_t init_t:dir getattr;
+allow aos_t initrc_t:dir { getattr search };
+allow aos_t initrc_t:file { getattr open read };
+
+allow aos_t kernel_t:file { getattr open read };
+allow aos_t kernel_t:dir { getattr search };
+
+allow aos_t modules_object_t:file { getattr map open read };
+allow aos_t modules_object_t:system module_load;
+
+allow aos_t syslogd_t:file { getattr open read };
+allow aos_t syslogd_t:dir { getattr search };
+
+allow aos_t systemd_logind_t:dir { getattr search };
+allow aos_t systemd_logind_t:file { getattr open read };
+
+allow aos_t dnsmasq_t:dir { getattr search };
+allow aos_t dnsmasq_t:file { getattr open read };
+
+allow aos_t system_dbusd_t:dir { getattr search };
+allow aos_t system_dbusd_t:file { getattr open read };
+
+allow aos_t nsfs_t:filesystem { getattr unmount };
+allow aos_t udev_t:dir { getattr search };
+allow aos_t systemd_journal_t:dir watch;
+
+corecmd_search_bin(aos_t)
+corecmd_exec_shell(aos_t)
+corecmd_exec_bin(aos_t)
+
+logging_send_syslog_msg(aos_t)
+logging_search_logs(aos_t)
+
+systemd_manage_networkd_units(aos_t)
+systemd_read_logind_state(aos_t)
+systemd_tmpfilesd_managed(aos_t, file)
+systemd_read_networkd_units(aos_t)
+systemd_manage_journal_files(aos_t)
+
+dev_getattr_autofs_dev(aos_t)
+dev_getattr_lvm_control(aos_t)
+dev_read_cpuid(aos_t)
+dev_rw_pmqos(aos_t)
+dev_getattr_framebuffer_dev(aos_t)
+dev_read_sysfs(aos_t)
+dev_read_realtime_clock(aos_t)
+dev_getattr_input_dev(aos_t)
+dev_read_rand(aos_t)
+dev_getattr_mouse_dev(aos_t)
+dev_read_kmsg(aos_t)
+dev_rw_loop_control(aos_t)
+dev_read_raw_memory(aos_t)
+dev_rw_wireless(aos_t)
+dev_rw_generic_files(aos_t)
+dev_getattr_all_chr_files(aos_t)
+dev_getattr_fs(aos_t)
+dev_read_urand(aos_t)
+dev_write_urand(aos_t)
+dev_read_urand(aos_t)
+dev_rw_lvm_control(aos_t)
+
+corenet_rw_tun_tap_dev(aos_t)
+corenet_rw_ppp_dev(aos_t)
+term_use_ptmx(aos_t)
+
+modutils_exec(aos_t)
+modutils_read_module_config(aos_t)
+modutils_read_module_deps(aos_t)
+
+kernel_getattr_proc(aos_t)
+kernel_read_network_state(aos_t)
+kernel_read_kernel_sysctls(aos_t)
+kernel_read_modprobe_sysctls(aos_t)
+kernel_search_network_sysctl(aos_t)
+kernel_read_net_sysctls(aos_t)
+kernel_read_system_state(aos_t)
+kernel_rw_vm_sysctls(aos_t)
+kernel_read_vm_overcommit_sysctl(aos_t)
+kernel_request_load_module(aos_t)
+kernel_get_sysvipc_info(aos_t)
+kernel_write_key(aos_t)
+kernel_search_debugfs(aos_t)
+kernel_getattr_unlabeled_dirs(aos_t)
+kernel_load_module(aos_t)
+
+storage_getattr_fixed_disk_dev(aos_t)
+storage_raw_read_fixed_disk(aos_t)
+storage_getattr_removable_dev(aos_t)
+storage_getattr_fuse_dev(aos_t)
+storage_manage_fixed_disk(aos_t)
+
+udev_read_state(aos_t)
+udev_read_runtime_files(aos_t)
+
+files_list_usr(aos_t)
+files_getattr_var_lib_dirs(aos_t)
+files_manage_generic_tmp_files(aos_t)
+files_search_kernel_modules(aos_t)
+files_read_etc_files(aos_t)
+files_search_home(aos_t)
+files_mounton_tmp(aos_t)
+files_manage_generic_tmp_dirs(aos_t)
+files_polyinstantiate_all(aos_t)
+files_list_mnt(aos_t)
+files_map_usr_files(aos_t)
+
+fs_getattr_cgroup(aos_t)
+fs_get_xattr_fs_quotas(aos_t)
+fs_set_xattr_fs_quotas(aos_t)
+fs_getattr_tmpfs(aos_t)
+fs_getattr_xattr_fs(aos_t)
+fs_mount_xattr_fs(aos_t)
+fs_mount_dos_fs(aos_t)
+fs_unmount_dos_fs(aos_t)
+fs_read_dos_files(aos_t)
+fs_search_dos(aos_t)
+fs_read_efivarfs_files(aos_t)
+fs_read_nsfs_files(aos_t)
+fs_unmount_nsfs(aos_t)
+
+miscfiles_read_generic_certs(aos_t)
+miscfiles_read_man_cache(aos_t)
+miscfiles_read_localization(aos_t)
+
+corenet_sctp_bind_generic_port(aos_t)
+corenet_tcp_bind_generic_node(aos_t)
+corenet_sctp_bind_all_unreserved_ports(aos_t)
+corenet_tcp_bind_all_ports(aos_t)
+corenet_tcp_connect_all_ports(aos_t)
+
+init_daemon_domain(aos_t, aos_exec_t)
+init_dbus_chat(aos_t)
+
+iptables_admin(aos_t, aos_r)
+logging_admin_syslog(aos_t, aos_r)
+rngd_admin(aos_t, aos_r)
+ntp_admin(aos_t, aos_r)
+dnsmasq_admin(aos_t, aos_r)
+init_admin(aos_t)
+
+domain_use_interactive_fds(aos_t)
+sysnet_read_config(aos_t)
+userdom_search_user_home_dirs(aos_t)
+iptables_exec(aos_t)
+fstools_exec(aos_t)
+dnsmasq_domtrans(aos_t)
+term_use_unallocated_ttys(aos_t)
+dbus_system_bus_client(aos_t)
+lvm_exec(aos_t)
+unconfined_domain_noaudit(aos_t)
+getty_domtrans(aos_t)
+locallogin_read_state(aos_t)
+
+
+########################################
+#
+# aos_var local policy
+#
+type aos_var_run_t;
+files_pid_file(aos_var_run_t)
+
+
+########################################
+#
+# aos_conf local policy
+#
+type aos_conf_t;
+files_pid_file(aos_conf_t)
-- 
2.25.1

